// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/restaking/v1beta1/validator_token.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/lightmos/lightmos-sdk/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ValidatorToken struct {
	Address   string      `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Total     *types.Coin `protobuf:"bytes,2,opt,name=total,proto3" json:"total,omitempty"`
	Retire    *types.Coin `protobuf:"bytes,3,opt,name=retire,proto3" json:"retire,omitempty"`
	Available *types.Coin `protobuf:"bytes,4,opt,name=available,proto3" json:"available,omitempty"`
}

func (m *ValidatorToken) Reset()         { *m = ValidatorToken{} }
func (m *ValidatorToken) String() string { return proto.CompactTextString(m) }
func (*ValidatorToken) ProtoMessage()    {}
func (*ValidatorToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_1506f433662b5cd1, []int{0}
}
func (m *ValidatorToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorToken.Merge(m, src)
}
func (m *ValidatorToken) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorToken) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorToken.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorToken proto.InternalMessageInfo

func (m *ValidatorToken) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ValidatorToken) GetTotal() *types.Coin {
	if m != nil {
		return m.Total
	}
	return nil
}

func (m *ValidatorToken) GetRetire() *types.Coin {
	if m != nil {
		return m.Retire
	}
	return nil
}

func (m *ValidatorToken) GetAvailable() *types.Coin {
	if m != nil {
		return m.Available
	}
	return nil
}

func init() {
	proto.RegisterType((*ValidatorToken)(nil), "cosmos.restaking.v1beta1.ValidatorToken")
}

func init() {
	proto.RegisterFile("cosmos/restaking/v1beta1/validator_token.proto", fileDescriptor_1506f433662b5cd1)
}

var fileDescriptor_1506f433662b5cd1 = []byte{
	// 282 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0xc6, 0x63, 0xfe, 0x14, 0xd5, 0x48, 0x0c, 0x11, 0x83, 0xdb, 0xc1, 0xaa, 0x98, 0xba, 0x60,
	0x2b, 0x65, 0x60, 0x87, 0x95, 0xa9, 0x42, 0x0c, 0x2c, 0x95, 0x93, 0x58, 0xa9, 0x95, 0x34, 0x57,
	0xd9, 0x47, 0x04, 0x6f, 0xc1, 0x5b, 0xc1, 0xd8, 0x91, 0x11, 0x25, 0x2f, 0x82, 0x92, 0x38, 0xa5,
	0x5b, 0xb7, 0xbb, 0xf3, 0xef, 0xfc, 0x7d, 0xfe, 0x4c, 0x45, 0x02, 0x6e, 0x03, 0x4e, 0x5a, 0xed,
	0x50, 0xe5, 0xa6, 0xcc, 0x64, 0x15, 0xc5, 0x1a, 0x55, 0x24, 0x2b, 0x55, 0x98, 0x54, 0x21, 0xd8,
	0x15, 0x42, 0xae, 0x4b, 0xb1, 0xb5, 0x80, 0x10, 0xb2, 0x9e, 0x17, 0x7b, 0x5e, 0x78, 0x7e, 0x3a,
	0xe9, 0x4f, 0x56, 0x1d, 0x27, 0x3d, 0xd6, 0x35, 0xd3, 0xeb, 0x0c, 0x32, 0xe8, 0xe7, 0x6d, 0xe5,
	0xa7, 0xdc, 0x4b, 0xc7, 0xca, 0xe9, 0xbd, 0x6a, 0x02, 0xc6, 0x4b, 0xdd, 0x7c, 0x11, 0x7a, 0xf5,
	0x32, 0x98, 0x78, 0x6e, 0x3d, 0x84, 0x8c, 0x5e, 0xa8, 0x34, 0xb5, 0xda, 0x39, 0x46, 0x66, 0x64,
	0x3e, 0x5e, 0x0e, 0x6d, 0x28, 0xe9, 0x39, 0x02, 0xaa, 0x82, 0x9d, 0xcc, 0xc8, 0xfc, 0x72, 0x31,
	0xf1, 0xef, 0x12, 0xed, 0xe5, 0x83, 0x45, 0xf1, 0x08, 0xa6, 0x5c, 0xf6, 0x5c, 0x18, 0xd1, 0x91,
	0xd5, 0x68, 0xac, 0x66, 0xa7, 0xc7, 0x36, 0x3c, 0x18, 0xde, 0xd3, 0xb1, 0xaa, 0x94, 0x29, 0x54,
	0x5c, 0x68, 0x76, 0x76, 0x6c, 0xeb, 0x9f, 0x7d, 0x78, 0xfa, 0xae, 0x39, 0xd9, 0xd5, 0x9c, 0xfc,
	0xd6, 0x9c, 0x7c, 0x36, 0x3c, 0xd8, 0x35, 0x3c, 0xf8, 0x69, 0x78, 0xf0, 0xba, 0xc8, 0x0c, 0xae,
	0xdf, 0x62, 0x91, 0xc0, 0x46, 0x16, 0x26, 0x5b, 0x63, 0x1b, 0xc8, 0x50, 0xdc, 0xba, 0x34, 0x97,
	0xef, 0x07, 0x5f, 0x83, 0x1f, 0x5b, 0xed, 0xe2, 0x51, 0x17, 0xcf, 0xdd, 0x5f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xee, 0xbf, 0x29, 0xf8, 0xbb, 0x01, 0x00, 0x00,
}

func (m *ValidatorToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Available != nil {
		{
			size, err := m.Available.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidatorToken(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Retire != nil {
		{
			size, err := m.Retire.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidatorToken(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Total != nil {
		{
			size, err := m.Total.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidatorToken(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintValidatorToken(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintValidatorToken(dAtA []byte, offset int, v uint64) int {
	offset -= sovValidatorToken(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValidatorToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovValidatorToken(uint64(l))
	}
	if m.Total != nil {
		l = m.Total.Size()
		n += 1 + l + sovValidatorToken(uint64(l))
	}
	if m.Retire != nil {
		l = m.Retire.Size()
		n += 1 + l + sovValidatorToken(uint64(l))
	}
	if m.Available != nil {
		l = m.Available.Size()
		n += 1 + l + sovValidatorToken(uint64(l))
	}
	return n
}

func sovValidatorToken(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozValidatorToken(x uint64) (n int) {
	return sovValidatorToken(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ValidatorToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidatorToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidatorToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidatorToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidatorToken
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidatorToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Total == nil {
				m.Total = &types.Coin{}
			}
			if err := m.Total.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retire", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidatorToken
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidatorToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Retire == nil {
				m.Retire = &types.Coin{}
			}
			if err := m.Retire.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Available", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidatorToken
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidatorToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Available == nil {
				m.Available = &types.Coin{}
			}
			if err := m.Available.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidatorToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidatorToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValidatorToken(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValidatorToken
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidatorToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidatorToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthValidatorToken
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupValidatorToken
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthValidatorToken
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthValidatorToken        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValidatorToken          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupValidatorToken = fmt.Errorf("proto: unexpected end of group")
)
