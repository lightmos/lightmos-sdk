// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/restaking/v1beta1/order.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OrderBook struct {
	IdCount int32    `protobuf:"varint,1,opt,name=idCount,proto3" json:"idCount,omitempty"`
	Orders  []*Order `protobuf:"bytes,2,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (m *OrderBook) Reset()         { *m = OrderBook{} }
func (m *OrderBook) String() string { return proto.CompactTextString(m) }
func (*OrderBook) ProtoMessage()    {}
func (*OrderBook) Descriptor() ([]byte, []int) {
	return fileDescriptor_df734a9fab7f1d9a, []int{0}
}
func (m *OrderBook) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderBook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderBook.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderBook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderBook.Merge(m, src)
}
func (m *OrderBook) XXX_Size() int {
	return m.Size()
}
func (m *OrderBook) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderBook.DiscardUnknown(m)
}

var xxx_messageInfo_OrderBook proto.InternalMessageInfo

func (m *OrderBook) GetIdCount() int32 {
	if m != nil {
		return m.IdCount
	}
	return 0
}

func (m *OrderBook) GetOrders() []*Order {
	if m != nil {
		return m.Orders
	}
	return nil
}

type Order struct {
	Id      int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Amount  int32  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Price   int32  `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_df734a9fab7f1d9a, []int{1}
}
func (m *Order) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Order.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(m, src)
}
func (m *Order) XXX_Size() int {
	return m.Size()
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

func (m *Order) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Order) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Order) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Order) GetPrice() int32 {
	if m != nil {
		return m.Price
	}
	return 0
}

type OrderDoneHistory struct {
	FromChainId  string             `protobuf:"bytes,1,opt,name=fromChainId,proto3" json:"fromChainId,omitempty"`
	ToChainId    string             `protobuf:"bytes,2,opt,name=toChainId,proto3" json:"toChainId,omitempty"`
	ChainHistory []*DoneChanHistory `protobuf:"bytes,3,rep,name=chainHistory,proto3" json:"chainHistory,omitempty"`
}

func (m *OrderDoneHistory) Reset()         { *m = OrderDoneHistory{} }
func (m *OrderDoneHistory) String() string { return proto.CompactTextString(m) }
func (*OrderDoneHistory) ProtoMessage()    {}
func (*OrderDoneHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_df734a9fab7f1d9a, []int{2}
}
func (m *OrderDoneHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderDoneHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderDoneHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderDoneHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderDoneHistory.Merge(m, src)
}
func (m *OrderDoneHistory) XXX_Size() int {
	return m.Size()
}
func (m *OrderDoneHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderDoneHistory.DiscardUnknown(m)
}

var xxx_messageInfo_OrderDoneHistory proto.InternalMessageInfo

func (m *OrderDoneHistory) GetFromChainId() string {
	if m != nil {
		return m.FromChainId
	}
	return ""
}

func (m *OrderDoneHistory) GetToChainId() string {
	if m != nil {
		return m.ToChainId
	}
	return ""
}

func (m *OrderDoneHistory) GetChainHistory() []*DoneChanHistory {
	if m != nil {
		return m.ChainHistory
	}
	return nil
}

type DoneChanHistory struct {
	SrcDemo   string           `protobuf:"bytes,1,opt,name=srcDemo,proto3" json:"srcDemo,omitempty"`
	DstDemo   string           `protobuf:"bytes,2,opt,name=dstDemo,proto3" json:"dstDemo,omitempty"`
	OrderDemo []*OrderDemoList `protobuf:"bytes,3,rep,name=orderDemo,proto3" json:"orderDemo,omitempty"`
}

func (m *DoneChanHistory) Reset()         { *m = DoneChanHistory{} }
func (m *DoneChanHistory) String() string { return proto.CompactTextString(m) }
func (*DoneChanHistory) ProtoMessage()    {}
func (*DoneChanHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_df734a9fab7f1d9a, []int{3}
}
func (m *DoneChanHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoneChanHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoneChanHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoneChanHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoneChanHistory.Merge(m, src)
}
func (m *DoneChanHistory) XXX_Size() int {
	return m.Size()
}
func (m *DoneChanHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_DoneChanHistory.DiscardUnknown(m)
}

var xxx_messageInfo_DoneChanHistory proto.InternalMessageInfo

func (m *DoneChanHistory) GetSrcDemo() string {
	if m != nil {
		return m.SrcDemo
	}
	return ""
}

func (m *DoneChanHistory) GetDstDemo() string {
	if m != nil {
		return m.DstDemo
	}
	return ""
}

func (m *DoneChanHistory) GetOrderDemo() []*OrderDemoList {
	if m != nil {
		return m.OrderDemo
	}
	return nil
}

type OrderDemoList struct {
	Buyer         string           `protobuf:"bytes,1,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Seller        string           `protobuf:"bytes,2,opt,name=seller,proto3" json:"seller,omitempty"`
	OrderDoneList []*OrderDoneList `protobuf:"bytes,3,rep,name=orderDoneList,proto3" json:"orderDoneList,omitempty"`
}

func (m *OrderDemoList) Reset()         { *m = OrderDemoList{} }
func (m *OrderDemoList) String() string { return proto.CompactTextString(m) }
func (*OrderDemoList) ProtoMessage()    {}
func (*OrderDemoList) Descriptor() ([]byte, []int) {
	return fileDescriptor_df734a9fab7f1d9a, []int{4}
}
func (m *OrderDemoList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderDemoList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderDemoList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderDemoList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderDemoList.Merge(m, src)
}
func (m *OrderDemoList) XXX_Size() int {
	return m.Size()
}
func (m *OrderDemoList) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderDemoList.DiscardUnknown(m)
}

var xxx_messageInfo_OrderDemoList proto.InternalMessageInfo

func (m *OrderDemoList) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *OrderDemoList) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *OrderDemoList) GetOrderDoneList() []*OrderDoneList {
	if m != nil {
		return m.OrderDoneList
	}
	return nil
}

type OrderDoneList struct {
	Price  int32 `protobuf:"varint,1,opt,name=price,proto3" json:"price,omitempty"`
	Amount int32 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *OrderDoneList) Reset()         { *m = OrderDoneList{} }
func (m *OrderDoneList) String() string { return proto.CompactTextString(m) }
func (*OrderDoneList) ProtoMessage()    {}
func (*OrderDoneList) Descriptor() ([]byte, []int) {
	return fileDescriptor_df734a9fab7f1d9a, []int{5}
}
func (m *OrderDoneList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderDoneList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderDoneList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderDoneList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderDoneList.Merge(m, src)
}
func (m *OrderDoneList) XXX_Size() int {
	return m.Size()
}
func (m *OrderDoneList) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderDoneList.DiscardUnknown(m)
}

var xxx_messageInfo_OrderDoneList proto.InternalMessageInfo

func (m *OrderDoneList) GetPrice() int32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *OrderDoneList) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func init() {
	proto.RegisterType((*OrderBook)(nil), "cosmos.restaking.v1beta1.OrderBook")
	proto.RegisterType((*Order)(nil), "cosmos.restaking.v1beta1.Order")
	proto.RegisterType((*OrderDoneHistory)(nil), "cosmos.restaking.v1beta1.OrderDoneHistory")
	proto.RegisterType((*DoneChanHistory)(nil), "cosmos.restaking.v1beta1.DoneChanHistory")
	proto.RegisterType((*OrderDemoList)(nil), "cosmos.restaking.v1beta1.OrderDemoList")
	proto.RegisterType((*OrderDoneList)(nil), "cosmos.restaking.v1beta1.OrderDoneList")
}

func init() {
	proto.RegisterFile("cosmos/restaking/v1beta1/order.proto", fileDescriptor_df734a9fab7f1d9a)
}

var fileDescriptor_df734a9fab7f1d9a = []byte{
	// 434 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xcd, 0x8e, 0xd3, 0x30,
	0x10, 0xae, 0x53, 0x5a, 0x14, 0x97, 0x02, 0xb2, 0x10, 0xca, 0x01, 0x85, 0x28, 0x42, 0xa2, 0x1c,
	0x48, 0x54, 0x38, 0x70, 0xe2, 0xd2, 0x16, 0xa9, 0x48, 0x54, 0x48, 0x39, 0x72, 0x00, 0xe5, 0xc7,
	0xb4, 0x56, 0x9b, 0x4c, 0x65, 0xbb, 0x88, 0xbe, 0x03, 0x07, 0x5e, 0x61, 0xdf, 0x66, 0x8f, 0x3d,
	0xee, 0x71, 0xd5, 0xbe, 0xc8, 0xca, 0x8e, 0xbd, 0x4d, 0x57, 0xaa, 0x76, 0x4f, 0xc9, 0x37, 0xf3,
	0xcd, 0xcc, 0x37, 0x33, 0x1e, 0xfc, 0x26, 0x07, 0x51, 0x82, 0x88, 0x39, 0x15, 0x32, 0x5d, 0xb2,
	0x6a, 0x1e, 0xff, 0x19, 0x66, 0x54, 0xa6, 0xc3, 0x18, 0x78, 0x41, 0x79, 0xb4, 0xe6, 0x20, 0x81,
	0x78, 0x35, 0x2b, 0xba, 0x65, 0x45, 0x86, 0x15, 0xfe, 0xc4, 0xee, 0x77, 0x45, 0x1c, 0x01, 0x2c,
	0x89, 0x87, 0x1f, 0xb3, 0x62, 0x0c, 0x9b, 0x4a, 0x7a, 0x28, 0x40, 0x83, 0x4e, 0x62, 0x21, 0xf9,
	0x84, 0xbb, 0x3a, 0x9f, 0xf0, 0x9c, 0xa0, 0x3d, 0xe8, 0x7d, 0x78, 0x1d, 0x9d, 0xcb, 0x18, 0xe9,
	0x74, 0x89, 0xa1, 0x87, 0xbf, 0x70, 0x47, 0x1b, 0xc8, 0x53, 0xec, 0xb0, 0xc2, 0xa4, 0x75, 0x58,
	0xa1, 0x6a, 0xe5, 0x9c, 0xa6, 0x12, 0xb8, 0xe7, 0x04, 0x68, 0xe0, 0x26, 0x16, 0x92, 0x97, 0xb8,
	0x9b, 0x96, 0x5a, 0x44, 0x5b, 0xb3, 0x0d, 0x22, 0x2f, 0x70, 0x67, 0xcd, 0x59, 0x4e, 0xbd, 0x47,
	0xda, 0x5c, 0x83, 0xf0, 0x02, 0xe1, 0xe7, 0xba, 0xc2, 0x04, 0x2a, 0x3a, 0x65, 0x42, 0x02, 0xdf,
	0x92, 0x00, 0xf7, 0x7e, 0x73, 0x28, 0xc7, 0x8b, 0x94, 0x55, 0x5f, 0xeb, 0xaa, 0x6e, 0xd2, 0x34,
	0x91, 0x57, 0xd8, 0x95, 0x60, 0xfd, 0xb5, 0x80, 0xa3, 0x81, 0xcc, 0xf0, 0x93, 0x5c, 0xfd, 0x9a,
	0x7c, 0x5e, 0x5b, 0x37, 0xfd, 0xee, 0x7c, 0xd3, 0xaa, 0xf8, 0x78, 0x91, 0xda, 0x80, 0xe4, 0x24,
	0x3c, 0xfc, 0x87, 0xf0, 0xb3, 0x3b, 0x0c, 0xd5, 0xbf, 0xe0, 0xf9, 0x84, 0x96, 0x60, 0xe4, 0x59,
	0xa8, 0x3c, 0x85, 0x90, 0xda, 0x63, 0x26, 0x63, 0x20, 0xf9, 0x82, 0x5d, 0x3d, 0x56, 0xed, 0xab,
	0x35, 0xbd, 0xbd, 0x67, 0x11, 0x8a, 0xfa, 0x8d, 0x09, 0x99, 0x1c, 0x23, 0x95, 0x9c, 0xfe, 0x89,
	0x53, 0x8d, 0x36, 0xdb, 0x6c, 0x29, 0x37, 0x52, 0x6a, 0xa0, 0x16, 0x21, 0xe8, 0x6a, 0x45, 0xed,
	0x86, 0x0c, 0x22, 0x33, 0xdc, 0x07, 0x3b, 0x71, 0x15, 0xfe, 0x50, 0x29, 0x86, 0x9e, 0x9c, 0x46,
	0x87, 0x9f, 0xad, 0x1a, 0x63, 0x38, 0x2e, 0x1a, 0x35, 0x16, 0xdd, 0x78, 0x16, 0x4e, 0xf3, 0x59,
	0x8c, 0xa6, 0x97, 0x7b, 0x1f, 0xed, 0xf6, 0x3e, 0xba, 0xde, 0xfb, 0xe8, 0xff, 0xc1, 0x6f, 0xed,
	0x0e, 0x7e, 0xeb, 0xea, 0xe0, 0xb7, 0x7e, 0x44, 0x73, 0x26, 0x17, 0x9b, 0x2c, 0xca, 0xa1, 0x8c,
	0xcd, 0x99, 0xd4, 0x9f, 0xf7, 0xa2, 0x58, 0xc6, 0x7f, 0x1b, 0x37, 0x23, 0xb7, 0x6b, 0x2a, 0xb2,
	0xae, 0x3e, 0x96, 0x8f, 0x37, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd2, 0x6d, 0x06, 0xb7, 0x54, 0x03,
	0x00, 0x00,
}

func (m *OrderBook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderBook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderBook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for iNdEx := len(m.Orders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOrder(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.IdCount != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.IdCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Order) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Order) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Order) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Price != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x20
	}
	if m.Amount != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OrderDoneHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderDoneHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderDoneHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainHistory) > 0 {
		for iNdEx := len(m.ChainHistory) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChainHistory[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOrder(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ToChainId) > 0 {
		i -= len(m.ToChainId)
		copy(dAtA[i:], m.ToChainId)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.ToChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromChainId) > 0 {
		i -= len(m.FromChainId)
		copy(dAtA[i:], m.FromChainId)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.FromChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DoneChanHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoneChanHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoneChanHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrderDemo) > 0 {
		for iNdEx := len(m.OrderDemo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrderDemo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOrder(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DstDemo) > 0 {
		i -= len(m.DstDemo)
		copy(dAtA[i:], m.DstDemo)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.DstDemo)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SrcDemo) > 0 {
		i -= len(m.SrcDemo)
		copy(dAtA[i:], m.SrcDemo)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.SrcDemo)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OrderDemoList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderDemoList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderDemoList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrderDoneList) > 0 {
		for iNdEx := len(m.OrderDoneList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrderDoneList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOrder(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OrderDoneList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderDoneList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderDoneList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if m.Price != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintOrder(dAtA []byte, offset int, v uint64) int {
	offset -= sovOrder(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OrderBook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IdCount != 0 {
		n += 1 + sovOrder(uint64(m.IdCount))
	}
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovOrder(uint64(l))
		}
	}
	return n
}

func (m *Order) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOrder(uint64(m.Id))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovOrder(uint64(m.Amount))
	}
	if m.Price != 0 {
		n += 1 + sovOrder(uint64(m.Price))
	}
	return n
}

func (m *OrderDoneHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromChainId)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.ToChainId)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if len(m.ChainHistory) > 0 {
		for _, e := range m.ChainHistory {
			l = e.Size()
			n += 1 + l + sovOrder(uint64(l))
		}
	}
	return n
}

func (m *DoneChanHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SrcDemo)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.DstDemo)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if len(m.OrderDemo) > 0 {
		for _, e := range m.OrderDemo {
			l = e.Size()
			n += 1 + l + sovOrder(uint64(l))
		}
	}
	return n
}

func (m *OrderDemoList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if len(m.OrderDoneList) > 0 {
		for _, e := range m.OrderDoneList {
			l = e.Size()
			n += 1 + l + sovOrder(uint64(l))
		}
	}
	return n
}

func (m *OrderDoneList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Price != 0 {
		n += 1 + sovOrder(uint64(m.Price))
	}
	if m.Amount != 0 {
		n += 1 + sovOrder(uint64(m.Amount))
	}
	return n
}

func sovOrder(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOrder(x uint64) (n int) {
	return sovOrder(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OrderBook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderBook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderBook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdCount", wireType)
			}
			m.IdCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &Order{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Order) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Order: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Order: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderDoneHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderDoneHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderDoneHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainHistory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainHistory = append(m.ChainHistory, &DoneChanHistory{})
			if err := m.ChainHistory[len(m.ChainHistory)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoneChanHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoneChanHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoneChanHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcDemo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcDemo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstDemo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstDemo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderDemo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderDemo = append(m.OrderDemo, &OrderDemoList{})
			if err := m.OrderDemo[len(m.OrderDemo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderDemoList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderDemoList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderDemoList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderDoneList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderDoneList = append(m.OrderDoneList, &OrderDoneList{})
			if err := m.OrderDoneList[len(m.OrderDoneList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderDoneList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderDoneList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderDoneList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrder(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOrder
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOrder
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOrder
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOrder        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrder          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOrder = fmt.Errorf("proto: unexpected end of group")
)
